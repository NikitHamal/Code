import java.security.DigestInputStream
import java.security.MessageDigest

plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'de.raffaelhahn.coder'
    compileSdk 34

    defaultConfig {
        applicationId "de.raffaelhahn.coder"
        minSdk 28
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            ndkBuild {
                cFlags += Arrays.asList("-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections")
            }
        }
        ndk {
            abiFilters += Arrays.asList("arm64-v8a", "x86_64")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }
    externalNativeBuild {
        ndkBuild {
            path file('src/main/cpp/Android.mk')
        }
    }
    packaging {
        jniLibs {
            useLegacyPackaging = true
        }
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation(platform("io.github.Rosemoe.sora-editor:bom:0.23.5"))
    implementation("io.github.Rosemoe.sora-editor:editor")
    implementation("io.github.Rosemoe.sora-editor:language-textmate")
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'commons-io:commons-io:2.18.0'
    implementation "com.google.guava:guava:24.1-jre"
    implementation project(":terminal-emulator")
    implementation project(":terminal-view")

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

}
configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

tasks.named("clean", Delete) {
    doLast {
        def tree = fileTree(dir: "${projectDir}/src/main/cpp")
        tree.include("bootstrap-*.zip")
        tree.each { it.delete() }
    }
}

def downloadFile(String localUrl, String remoteUrl, String expectedChecksum) {
    def digest = MessageDigest.getInstance("SHA-256")

    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        try {
            while (true) {
                def readBytes = input.read(buffer)
                if (readBytes < 0) break
                digest.update(buffer, 0, readBytes)
            }
        } finally {
            input.close()
        }

        def checksum = new BigInteger(1, digest.digest()).toString(16)
        while (checksum.length() < 64) { checksum = "0$checksum" }
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.warn("Deleting old local file with wrong hash: $localUrl: expected: $expectedChecksum, actual: $checksum")
            file.delete()
        }
    }

    logger.quiet("Downloading $remoteUrl ...")

    file.getParentFile().mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URI(remoteUrl).toURL().openConnection()
    def digestStream = new DigestInputStream(connection.getInputStream(), digest)
    try {
        digestStream.transferTo(out)
    } finally {
        out.close()
        digestStream.close()
    }

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    while (checksum.length() < 64) { checksum = "0$checksum" }
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for $remoteUrl:\n Expected: $expectedChecksum\n Actual:   $checksum")
    }
}


task downloadPrebuilt() {
    doLast {
        def bootstrapVersion = "2025.02.21-r1"
        def arches = [
                "aarch64": "41b0ef53ab3d368fed7b030489ef14fec7ae527a2e47749da31c2a402c9eef2a",
                "x86_64": "d92a879a4f1f2f79f8c4df900861174908892be804bbf826468dd67af487442e",
                "arm": "eff03e5dde8f29fd403efb148a0b1c170f9bd78175d08c7372e717ed6a9fc87d"
        ]
        arches.each { arch, checksum ->
            def downloadTo = "src/main/cpp/bootstrap-${arch}.zip"
            def url = "https://github.com/Philipp0002/termux-packages/releases/download/bootstrap-${bootstrapVersion}/bootstrap-archives-${arch}.zip"
            downloadFile(downloadTo, url, checksum)
        }

        def prootVersion = "5.1.107-65"
        downloadFile("src/main/jniLibs/arm64-v8a/libproot-loader.so", "https://bootstrap.termux.net/libproot-loader-aarch64-${prootVersion}.so", "23cbee2320ed6f55ec4c47d50573a3ee59163f84c6e1bfaf7fb67049f71a2b59")
        downloadFile("src/main/jniLibs/x86_64/libproot-loader.so", "https://bootstrap.termux.net/libproot-loader-x86_64-${prootVersion}.so", "bf69995d5c9d35591197ce61f6046e80116858334109bf9b6ea9d787ca2fe256")
        downloadFile("src/main/jniLibs/arm64-v8a/libproot-loader32.so", "https://bootstrap.termux.net/libproot-loader32-aarch64-${prootVersion}.so", "8e0d7fbdc5937886c272a3ef7c2c1d1b62ab51dcfc542b938675bf05baf4a83a")
        downloadFile("src/main/jniLibs/x86_64/libproot-loader32.so", "https://bootstrap.termux.net/libproot-loader32-x86_64-${prootVersion}.so", "b33f2ef262ec0458504e6327d84c7d7b87cc504c0ea53cf3eccc60a3746241b2")
    }
}


afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.configure { task ->
            task.dependsOn("downloadPrebuilt")
        }
    }
}
